import React, { Component } from "react";import {View, Text, Image, TouchableOpacity, ActivityIndicator , Linking} from "react-native";import {	Container,	Content,	Header,	Button,	Left,	Body,	Title, Form, Textarea, Icon, CheckBox,} from 'native-base'import styles from '../../assets/style';import i18n from "../../locale/i18n";import {connect} from "react-redux";import {getContactInfo , complaint} from "../actions";import Modal from "react-native-modal";class CategoryPicker extends Component {	constructor(props){		super(props);		this.state = {			loader                     	: true,			Error                      	: '',			message                    	: '',			selectFilter               	: false,			selectedCat					: null,			selectKind                 	: false,			selectSubKind              	: false,			subKind                    	: i18n.t('filtersub'),			filter                     	: i18n.t('filtermon'),			subKindId                  	: null,			mainCat						: [],		}	}	toggleModalFilter = () => {		this.setState({ selectFilter: !this.state.selectFilter});	};	toggleCatFilter = (catId) => {		this.setState({ selectedCat: catId, selectFilter: false});	};	selectFilter(id, name , cat, isMainCat) {		this.setState({			filterId        : id,			filter          : isMainCat ? name : this.state.filter ,		});		this.props.selectedId(id);		let mainCat = this.state.mainCat;		if (isMainCat) mainCat = [];		if (cat.childes !== []) mainCat.push(cat);		let index = mainCat.indexOf(cat);		mainCat.splice(index + 1, mainCat.length - index);		this.setState({ mainCat });		this.setState({ selectFilter: isMainCat ? !this.state.selectFilter : false, selectedCat: null});	}	renderChildComponent(subcategories, catId, name, i){		const catName = subcategories[0] ? subcategories[0].name : name;		return(			<View>				<View style={[styles.overHidden, styles.rowGroup]}>					<TouchableOpacity onPress={() => this.toggleCatFilter(catId)} style={[ styles.marginVertical_10 , styles.Width_100, styles.height_50 , styles.paddingHorizontal_20, styles.paddingVertical_10 , styles.rowGroup, styles.Border, (this.state.filterId !== null ? styles.border_red :  styles.border_gray )]}>						<Text style={[styles.textRegular, styles.textSize_14, (this.state.filterId !== null ? styles.text_red :  styles.text_black )]}>							{ i+1 == this.state.mainCat.length ? i18n.t('filtermon') : catName }						</Text>						<Icon style={[styles.textSize_20, styles.text_light_gray]} type="AntDesign" name='down' />					</TouchableOpacity>				</View>				<Modal isVisible={this.state.selectedCat == catId} onBackdropPress={() => this.toggleCatFilter(null)}>					<View style={[styles.overHidden, styles.bg_White, styles.Radius_5]}>						<View style={[styles.Border, styles.border_gray, styles.paddingVertical_15]}>							<Text style={[styles.textRegular, styles.text_black, styles.textSize_14, styles.textLeft , styles.SelfCenter]}>								{i18n.t('filtermon')}							</Text>						</View>						<View style={[styles.paddingHorizontal_10, styles.marginVertical_10]}>							{								subcategories.map((cat, i) => (									<TouchableOpacity										key={i}										style               = {[styles.rowGroup, styles.marginVertical_10]}										onPress             = {() => this.selectFilter(cat.id, cat.name , cat, false)}									>										<View style={[styles.overHidden, styles.rowRight]}>											<CheckBox												style               = {[styles.checkBox, styles.bg_red, styles.border_red]}												color               = {styles.text_red}												selectedColor       = {styles.text_red}												checked             = {this.state.filterId === 1}											/>											<Text style={[styles.textRegular , styles.text_black, styles.textSize_16, styles.paddingHorizontal_20]}>												{cat.name}											</Text>										</View>									</TouchableOpacity>								))							}						</View>					</View>				</Modal>			</View>		);	}	render() {		return (			<View>				<View style={[styles.overHidden, styles.rowGroup]}>					<TouchableOpacity onPress={() => this.toggleModalFilter()} style={[ styles.marginVertical_10 , styles.Width_100, styles.height_50 , styles.paddingHorizontal_20, styles.paddingVertical_10 , styles.rowGroup, styles.Border, (this.state.filterId !== null ? styles.border_red :  styles.border_gray )]}>						<Text style={[styles.textRegular, styles.textSize_14, (this.state.filterId !== null ? styles.text_red :  styles.text_black )]}>							{ this.state.filter }						</Text>						<Icon style={[styles.textSize_20, styles.text_light_gray]} type="AntDesign" name='down' />					</TouchableOpacity>				</View>				<Modal isVisible={this.state.selectFilter} onBackdropPress={() => this.toggleModalFilter()}>					<View style={[styles.overHidden, styles.bg_White, styles.Radius_5]}>						<View style={[styles.Border, styles.border_gray, styles.paddingVertical_15]}>							<Text style={[styles.textRegular, styles.text_black, styles.textSize_14, styles.textLeft , styles.SelfCenter]}>								{i18n.t('filtermon')}							</Text>						</View>						<View style={[styles.paddingHorizontal_10, styles.marginVertical_10]}>							{								this.props.categories.map((cat, i) => (									<TouchableOpacity										key={i}										style               = {[styles.rowGroup, styles.marginVertical_10]}										onPress             = {() => this.selectFilter(cat.id, cat.name , cat, true)}									>										<View style={[styles.overHidden, styles.rowRight]}>											<CheckBox												style               = {[styles.checkBox, styles.bg_red, styles.border_red]}												color               = {styles.text_red}												selectedColor       = {styles.text_red}												checked             = {this.state.filterId === 1}											/>											<Text style={[styles.textRegular , styles.text_black, styles.textSize_16, styles.paddingHorizontal_20]}>												{cat.name}											</Text>										</View>									</TouchableOpacity>								))							}						</View>					</View>				</Modal>				{					this.state.mainCat.map(( cat, i ) => {						if (cat.childes.length > 0)							return ( this.renderChildComponent(cat.childes, cat.id, cat.name, i) );					})				}			</View>		);	}}const mapStateToProps = ({ contactInfo, lang , profile }) => {	return {		lang        : lang.lang,		user        : profile.user,		contactInfo : contactInfo.contactInfo,		loader      : contactInfo.loader	};};export default connect(mapStateToProps, {getContactInfo , complaint})(CategoryPicker);